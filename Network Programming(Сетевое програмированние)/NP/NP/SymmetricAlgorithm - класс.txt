SymmetricAlgorithm - класс
 
Представляет абстрактный базовый класс, от которого наследуются все реализации симметричных алгоритмов шифрования.
Пространство имен:   System.Security.Cryptography
Сборка:  mscorlib (в mscorlib.dll)

Иерархия наследования
System.Object
System.Security.Cryptography.SymmetricAlgorithm
System.Security.Cryptography.Aes
System.Security.Cryptography.DES
System.Security.Cryptography.RC2
System.Security.Cryptography.Rijndael
System.Security.Cryptography.TripleDES

Синтаксис
[ComVisibleAttribute(true)]
public abstract class SymmetricAlgorithm : IDisposable

Конструкторы
 SymmetricAlgorithm()	Инициализирует новый экземпляр класса SymmetricAlgorithm.

Свойства
 BlockSize	Возвращает или задает размер блока криптографической операции (в битах).
 FeedbackSize	Возвращает или задает размер ответа в криптографической операции (в битах).
 IV	Возвращает или задает вектор инициализации (IV) для симметричного алгоритма.
 Key	Возвращает или задает секретный ключ для симметричного алгоритма.
 KeySize	Возвращает или задает размер секретного ключа (в битах), используемого симметричным алгоритмом.
 LegalBlockSizes	Возвращает размеры блоков (в битах), которые поддерживаются симметричным алгоритмом.
 LegalKeySizes	Возвращает размеры ключа (в битах), которые поддерживаются симметричным алгоритмом.
 Mode	Возвращает или задает режим функционирования симметричного алгоритма.
 Padding	Возвращает или задает режим заполнения, используемый в симметричном алгоритме.

Методы
 Clear()	Освобождает все ресурсы, используемые классом SymmetricAlgorithm.
 Create()	Создает криптографический объект по умолчанию, используемый для выполнения симметричного алгоритма.
 Create(String)	Создает заданный криптографический объект, используемый для выполнения симметричного алгоритма.
 CreateDecryptor()	Создает симметричный объект-дешифратор с текущим свойством Key и вектором инициализации (IV).
 CreateDecryptor(Byte[], Byte[])	При переопределении в производном классе создает симметричный объект-дешифратор с указанным свойством Key и вектором инициализации (IV).
 CreateEncryptor()	Создает симметричный объект-шифратор с текущим свойством Key и вектором инициализации (IV).
 CreateEncryptor(Byte[], Byte[])	Если переопределено в производном классе, создает симметричный объект-шифратор с заданным свойством Key и вектором инициализации (IV).
 Dispose()	Освобождает все ресурсы, используемые текущим экземпляром класса SymmetricAlgorithm.
 Dispose(Boolean)	Освобождает неуправляемые ресурсы, используемые объектом SymmetricAlgorithm, а при необходимости освобождает также и управляемые ресурсы.
 Equals(Object)	Определяет, равен ли заданный объект текущему объекту.(Наследуется от Object.)
 Finalize()	Позволяет объекту попытаться освободить ресурсы и выполнить другие операции по очистке перед тем, как объект будет утилизирован сборщиком мусора. (Наследуется от Object.)
 GenerateIV()	Если переопределено в производном классе, создает произвольный вектор инициализации (IV), используемый для алгоритма.
 GenerateKey()	Если переопределено в производном классе, генерирует произвольный ключ (Key), используемый для алгоритма.
 GetHashCode()	Играет роль хэш-функции для определённого типа.(Наследуется от Object.)
 GetType()	Возвращает объект класса Type для текущего экземпляра. (Наследуется от Object.)
 MemberwiseClone()	Создает "поверхностную" копию текущего объекта. (Наследуется от Object.)
 ToString()	Возвращает строковое представление текущего объекта.(Наследуется от Object.)
 ValidKeySize(Int32)	Определяет допустимость указанного размера ключа для текущего алгоритма.

Поля
 BlockSizeValue	Представляет размер блока криптографической операции (в битах).
 FeedbackSizeValue	Представляет размер ответа в криптографической операции (в битах).
 IVValue	Представляет вектор инициализации (IV) для симметричного алгоритма.
 KeySizeValue	Представляет размер секретного ключа (в битах), используемого симметричным алгоритмом.
 KeyValue	Представляет секретный ключ для симметричного алгоритма.
 LegalBlockSizesValue	Задает размеры блоков (в битах), которые поддерживаются симметричным алгоритмом.
 LegalKeySizesValue	Задает размеры ключей в битах, которые поддерживаются симметричным алгоритмом.
 ModeValue	Представляет режим шифрования, используемый в симметричном алгоритме.
 PaddingValue	Представляет режим заполнения, используемый в симметричном алгоритме.

Заметки
Классы, производные от SymmetricAlgorithm класс использовать режим сцепления блоков шифра (CBC), именем которого требуется ключ (Key) и вектор инициализации (IV) для выполнения криптографических преобразований данных.Чтобы расшифровать данные, зашифрованные с помощью одного из SymmetricAlgorithm классов, необходимо задать Key Свойства и IV свойство те же значения, которые были использованы для шифрования.Симметричный алгоритм для использования секретный ключ известен только отправитель и получатель.
RijndaelManaged, DESCryptoServiceProvider, RC2CryptoServiceProvider, и TripleDESCryptoServiceProvider являются реализациями симметричных алгоритмов.
Обратите внимание, что при использовании производных классов, недостаточно, с точки зрения безопасности, чтобы просто принудительно запустить сборку мусора после завершения использования объекта.Необходимо явно вызывать Clear в объекте нулю конфиденциальных данных в пределах объекта перед его выпуском.Обратите внимание, что сборщик мусора не обнуления содержимого объектов, но просто помечается как доступная для перераспределения памяти.Таким образом данные, содержащиеся в объекте сбора мусора могут по-прежнему присутствовать в куче в незанятое памяти.В случае криптографических объектов эти данные могут содержать конфиденциальную информацию, такую как ключ или блок открытого текста.
Все криптографические классы в .NET Framework, содержащих конфиденциальные данные реализация Clear метода.При вызове Clear метод перезаписывает все конфиденциальные данные в объект нулями и затем освобождает объект, чтобы он мог быть безопасно сборщиком мусора.Когда обнуления и освобождения объекта необходимо вызвать Dispose метода disposing равным True освободит все управляемые и неуправляемые ресурсы, связанные с объектом.

Примечания для наследующих объектов:
При наследовании от SymmetricAlgorithm класса, необходимо переопределить следующие члены: CreateDecryptor, CreateEncryptor, GenerateIV, и GenerateKey.

Примеры
В следующем примере кода RijndaelManaged класса с заданным Key свойство и вектор инициализации (IV) для шифрования файла, заданного inName, и зашифрованный результат выводится в файл, указанный параметром outName. desKey И desIV параметров для метода, 8-байтовые массивы.Необходимо установить пакет стойкого шифрования для выполнения этого примера.

private static void EncryptData(String inName, String outName, byte[] rijnKey, byte[] rijnIV)
 {    
     //Create the file streams to handle the input and output files.
     FileStream fin = new FileStream(inName, FileMode.Open, FileAccess.Read);
     FileStream fout = new FileStream(outName, FileMode.OpenOrCreate, FileAccess.Write);
     fout.SetLength(0);

     //Create variables to help with read and write.
     byte[] bin = new byte[100]; //This is intermediate storage for the encryption.
     long rdlen = 0;              //This is the total number of bytes written.
     long totlen = fin.Length;    //This is the total length of the input file.
     int len;                     //This is the number of bytes to be written at a time.

     SymmetricAlgorithm rijn = SymmetricAlgorithm.Create(); //Creates the default implementation, which is RijndaelManaged.         
     CryptoStream encStream = new CryptoStream(fout, rijn.CreateEncryptor(rijnKey, rijnIV), CryptoStreamMode.Write);

     Console.WriteLine("Encrypting...");

     //Read from the input file, then encrypt and write to the output file.
     while(rdlen < totlen)
     {
         len = fin.Read(bin, 0, 100);
         encStream.Write(bin, 0, len);
         rdlen = rdlen + len;
         Console.WriteLine("{0} bytes processed", rdlen);
     }

     encStream.Close();  
     fout.Close();
     fin.Close();                   
 }