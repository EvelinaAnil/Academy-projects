HashAlgorithm - класс 
 
Представляет базовый класс, из которого создаются все реализации криптографических хэш-алгоритмов.
Пространство имен:   System.Security.Cryptography
Сборка:  mscorlib (в mscorlib.dll)

Иерархия наследования
System.Object
System.Security.Cryptography.HashAlgorithm
System.Security.Cryptography.KeyedHashAlgorithm
System.Security.Cryptography.MD5
System.Security.Cryptography.RIPEMD160
System.Security.Cryptography.SHA1
System.Security.Cryptography.SHA256
System.Security.Cryptography.SHA384
System.Security.Cryptography.SHA512

Синтаксис
[ComVisibleAttribute(true)]
public abstract class HashAlgorithm : IDisposable, ICryptoTransform

Конструкторы
 HashAlgorithm()	Инициализирует новый экземпляр класса HashAlgorithm.

Свойства
 CanReuseTransform	Возвращает значение, указывающее, возможно ли повторное использование текущего преобразования.
 CanTransformMultipleBlocks	Если переопределено в производном классе, возвращает значение, указывающее, возможно ли преобразование нескольких блоков.
 Hash	Возвращает значение вычисляемого хэш-кода.
 HashSize	Возвращает размер вычисляемого хэш-кода в битах.
 InputBlockSize	Если переопределено в производном классе, возвращает размер входного блока.
 OutputBlockSize	Если переопределено в производном классе, возвращает размер выходного блока.

Методы
 Clear()	Освобождает все ресурсы, используемые классом HashAlgorithm.
 ComputeHash(Byte[])	Вычисляет хэш-значение для заданного массива байтов.
 ComputeHash(Byte[], Int32, Int32)	Вычисляет хэш-значение для заданной области заданного массива байтов.
 ComputeHash(Stream)	Вычисляет хэш-значение для заданного объекта Stream.
 Create()	Создает экземпляр реализации по умолчанию хэш-алгоритма.
 Create(String)	Создает экземпляр заданной реализации хэш-алгоритма.
 Dispose()	Освобождает все ресурсы, используемые текущим экземпляром класса HashAlgorithm.
 Dispose(Boolean)	Освобождает неуправляемые ресурсы, используемые объектом HashAlgorithm, а при необходимости освобождает также и управляемые ресурсы.
 Equals(Object)	Определяет, равен ли заданный объект текущему объекту.(Наследуется от Object.)
 Finalize()	Позволяет объекту попытаться освободить ресурсы и выполнить другие операции по очистке перед тем, как объект будет утилизирован сборщиком мусора. (Наследуется от Object.)
 GetHashCode()	Играет роль хэш-функции для определённого типа.(Наследуется от Object.)
 GetType()	Возвращает объект класса Type для текущего экземпляра. (Наследуется от Object.)
 HashCore(Byte[], Int32, Int32)	Если переопределено в производном классе, передает данные, записанные в объект, на вход хэш-алгоритма для вычисления хэша.
 HashFinal()	Если переопределено в производном классе, завершает вычисление хэша после обработки последних данных криптографическим потоковым объектом.
 Initialize()	Инициализирует реализацию класса HashAlgorithm.
 MemberwiseClone()	Создает "поверхностную" копию текущего объекта. (Наследуется от Object.)
 ToString()	Возвращает строковое представление текущего объекта.(Наследуется от Object.)
 TransformBlock(Byte[], Int32, Int32, Byte[], Int32)	Вычисляет хэш-значение для заданной области входного массива байтов и копирует указанную область входного массива байтов в заданную область выходного массива байтов.
 TransformFinalBlock(Byte[], Int32, Int32)	Вычисляет хэш-значение для заданной области заданного массива байтов.

Поля
 HashSizeValue	Представляет размер вычисляемого хэш-кода в битах.
 HashValue	Представляет значение вычисляемого хэш-кода.
 State	Представляет состояние процесса вычисления хэша.

Заметки
Хэш-функции являются фундаментальным понятием современной криптографии.Эти функции отображают двоичные строки произвольной длины в короткие двоичные строки фиксированной длины, называемые хэш-значения.Криптографический хэш-функции имеет свойство, что это позволяет найти два различных ввода, которые хэшируются в то же значение.Хэш-функции обычно используются с цифровыми подписями и для обеспечения целостности данных.
Хэш используется в качестве уникального значения фиксированной длины, представляющего большой объем данных.Хэши двух наборов данных должны совпадать, если соответствующие данные также совпадают.Незначительные изменения данных приводят абсолютно непредсказуемые изменения в хэш.

Примечания для наследующих объектов:
При наследовании от HashAlgorithm класса, необходимо переопределить следующие члены: HashCore и HashFinal.

Примеры
В следующем примере кода вычисляет пример SHA1CryptoServiceProvider хэш для массива.В этом примере предполагается существование предварительно определенных байтовый массив dataArray[]. SHA1CryptoServiceProvider является производным от класса HashAlgorithm.

HashAlgorithm sha = new SHA1CryptoServiceProvider();
byte[] result = sha.ComputeHash(dataArray);