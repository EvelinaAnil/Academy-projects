SmtpClient - класс
 
Позволяет приложениям отправлять электронную почту с помощью протокола SMTP (Simple Mail Transfer Protocol).
Пространство имен:   System.Net.Mail
Сборка:  System (в System.dll)

Иерархия наследования
System.Object
System.Net.Mail.SmtpClient

Синтаксис
public class SmtpClient : IDisposable

Конструкторы
 SmtpClient()	Инициализирует новый экземпляр класса SmtpClient, используя параметры файла конфигурации.
 SmtpClient(String)	Инициализирует новый экземпляр класса SmtpClient, который отправляет электронную почту с помощью указанного сервера SMTP.
 SmtpClient(String, Int32)	Инициализирует новый экземпляр класса SmtpClient, который отправляет электронную почту с помощью указанного сервера SMTP и порта.

Свойства
 ClientCertificates	Указывает, какие сертификаты следует использовать для установки SSL-подключения.
 Credentials	Возвращает или задает учетные данные, используемые для проверки подлинности отправителя.
 DeliveryFormat	Получает или задает формат доставки, используемый SmtpClient для отправки электронной почты.
 DeliveryMethod	Указывает, как будут обрабатываться исходящие сообщения электронной почты.
 EnableSsl	Указывает, использует ли SmtpClient протокол SSL для шифрования подключения.
 Host	Возвращает или задает имя или IP-адрес хоста, используемого для SMTP-транзакций.
 PickupDirectoryLocation	Возвращает или задает папку, в которой приложения сохраняют почтовые сообщения для обработки локальным SMTP-сервером.
 Port	Возвращает или задает порт, используемый для SMTP-транзакций.
 ServicePoint	Возвращает сетевое подключение, используемое для передачи сообщения электронной почты.
 TargetName	Получает или задает имя поставщика услуг (SPN) для проверки подлинности при использовании расширенной защиты.
 Timeout	Возвращает или задает значение, указывающее промежуток времени, после которого для синхронного вызова Send истечет время тайм-аута.
 UseDefaultCredentials	Возвращает или задает значение Boolean, которое управляет отправкой учетных данных DefaultCredentials вместе с запросами.

Методы
 Dispose()	Отправляет сообщение QUIT на SMTP-сервер, правильно завершает TCP-подключение и освобождает все ресурсы, используемые текущим экземпляром класса SmtpClient.
 Dispose(Boolean)	Отправляет сообщение QUIT на SMTP-сервер, правильно завершает TCP-подключение и освобождает все ресурсы, используемые текущим экземпляром класса SmtpClient, и при необходимости освобождает управляемые ресурсы.
 Equals(Object)	Определяет, равен ли заданный объект текущему объекту.(Наследуется от Object.)
 Finalize()	Позволяет объекту попытаться освободить ресурсы и выполнить другие операции по очистке перед тем, как объект будет утилизирован сборщиком мусора. (Наследуется от Object.)
 GetHashCode()	Играет роль хэш-функции для определённого типа.(Наследуется от Object.)
 GetType()	Возвращает объект класса Type для текущего экземпляра. (Наследуется от Object.)
 MemberwiseClone()	Создает "поверхностную" копию текущего объекта. (Наследуется от Object.)
 OnSendCompleted(AsyncCompletedEventArgs)	Создает событие SendCompleted.
 Send(MailMessage)	Отправляет указанное сообщение на сервер SMTP для доставки.
 Send(String, String, String, String)	Отправляет указанное сообщение электронной почты на сервер SMTP для доставки.Отправитель, получатели, тема и основная часть сообщения указываются с помощью объектов String.
 SendAsync(MailMessage, Object)	Отправляет указанное сообщение электронной почты на сервер SMTP для доставки.Этот метод не блокирует вызывающий поток и позволяет вызывающей стороне передать объект в метод, вызванный после завершения операции.
 SendAsync(String, String, String, String, Object)	Отправляет сообщение электронной почты на сервер SMTP для доставки.Отправитель, получатели, тема и основная часть сообщения указываются с помощью объектов String.Этот метод не блокирует вызывающий поток и позволяет вызывающей стороне передать объект в метод, вызванный после завершения операции.
 SendAsyncCancel()	Отменяет асинхронную операцию отправки сообщения электронной почты.
 SendMailAsync(MailMessage)	Отправляет указанное сообщение SMTP-серверу для доставки в качестве асинхронной операции.
 SendMailAsync(String, String, String, String)	Отправляет указанное сообщение SMTP-серверу для доставки в качестве асинхронной операции. .Отправитель, получатели, тема и основная часть сообщения указываются с помощью объектов String.
 ToString()	Возвращает строковое представление текущего объекта.(Наследуется от Object.)

События
 SendCompleted	Происходит после завершения асинхронной операции по отправке электронной почты.

Заметки
Класс SmtpClient используется для отправки электронной почты на сервер SMTP для доставки.Протокол SMTP определен в стандарте RFC 2821, который доступен по адресу http://www.ietf.org.
Классы, показанные в следующей таблице, используются для построения сообщений электронной почты, которые могут быть отправлены с помощью SmtpClient.
Класс
Описание
Attachment
Представляет файловые вложения.Этот класс позволяет вложить в сообщение электронной почты файлы, потоки или текст.
MailAddress
Представляет адрес электронной почты отправителя и получателей.
MailMessage
Представляет сообщение электронной почты.
Для создания и отправки сообщения электронной почты с помощью SmtpClient необходимо указать следующие сведения:
Сервер-хост SMTP, используемый для отправки электронной почты.См. свойства Host и Port.
Учетные данные для проверки подлинности, если этого требует сервер SMTP.См. свойство Credentials.
Адрес электронной почты отправителя.См. описание методов Send и SendAsync, принимающих параметр from.Также см. описание свойства MailMessage.From.
Электронные адреса получателей сообщения.См. описание методов Send и SendAsync, принимающих параметр recipient.Также см. описание свойства MailMessage.To.
Содержимое сообщения.См. описание методов Send и SendAsync, принимающих параметр body.Также см. описание свойства MailMessage.Body.
Чтобы включить вложение в сообщение электронной почты, сначала следует создать вложение с помощью класса Attachment, а затем добавить его в сообщение с помощью свойства MailMessage.Attachments.В зависимости от используемого получателями клиента электронной почты и файлового типа вложения, возможно, некоторые получатели не смогут прочитать вложение.Для клиентов, которые не отображают вложение в исходной форме, можно указать альтернативные представления с помощью свойства MailMessage.AlternateViews.
С помощью файлов конфигурации приложения или компьютера можно указать значения хоста, порта и учетных данных, используемые по умолчанию для всех объектов SmtpClient.Для получения дополнительной информации см. Элемент <mailSettings> (параметры сети).
Чтобы отправить сообщение электронной почты и заблокировать работу во время ожидания передачи сообщения на сервер SMTP, можно воспользоваться одним из синхронных методов Send.Чтобы разрешить главному потоку программы продолжать выполнение во время передачи почты, воспользуйтесь одним из асинхронных методов SendAsync.Событие SendCompleted возникает по завершении операции SendAsync.Для получения этого события необходимо добавить делегат SendCompletedEventHandler в SendCompleted.Делегат SendCompletedEventHandler должен обращаться к методу обратного вызова, обрабатывающему уведомления о событиях SendCompleted.Чтобы отменить асинхронную передачу электронной почты, воспользуйтесь методом SendAsyncCancel.
System_CAPS_noteПримечание
Если снова вызвать SendAsync или Send при выполняемой передаче электронной почты, возникнет исключение InvalidOperationException.
Подключение к серверу SMTP, установленное текущим экземпляром класса SmtpClient, может использоваться повторно, если приложению потребуется отправить несколько сообщений тому же серверу SMTP.Это особенно полезно, когда используемая проверка подлинности или шифрование устанавливают подключение к SMTP-серверу.Процесс проверки подлинности и установки сеанса TLS может быть дорогостоящей операцией.Требование повторной установки подключения для каждого сообщения при отправке большого количества электронной почты одному серверу SMTP может значительно отразиться на производительности.Имеется множество мощных почтовых приложений, которые отправляют по электронной почте обновления состояния, рассылки новостей или оповещения.Также многие приложения – почтовые клиенты поддерживают автономный режим, в котором пользователи могут формировать сообщения электронной почты, отсылаемые позднее, после установки подключения к серверу SMTP.Типичным поведением почтового клиента является отправка всех сообщений SMTP определенному SMTP-серверу (предоставленному поставщиком услуг Интернета) с последующим перенаправлением этой электронной почты другим серверам SMTP.
Реализация класса SmtpClient осуществляет пулинг подключений SMTP во избежание издержек на повторную установку подключения для каждого сообщения, направляемого тому же серверу.Приложение может повторно использовать тот же объект SmtpClient для отправки множества разных сообщений электронной почты одному серверу SMTP и многим разным серверам SMTP.В результате нет возможности определить, когда приложение прекращает использование объекта SmtpClient и его следует очистить.
Когда сеанс SMTP оканчивается и клиенту требуется завершить подключение, он должен отослать серверу сообщение QUIT, чтобы указать, что у него больше нет сообщений для отправки.Это позволяет серверу освободить ресурсы, связанные с подключением от клиента, и обработать сообщения, отправленные клиентом.
У класса SmtpClient нет метода Finalize, поэтому приложение должно вызвать перегруженный метод Dispose для явного высвобождения ресурсов.Метод Dispose перебирает все установленные соединения с сервером SMTP, указанным в свойстве Host, и посылает сообщение QUIT, за которым следует документированное завершение TCP-соединения.Метод Dispose также освобождает неуправляемые ресурсы, используемые Socket, и (необязательно) освобождает управляемые ресурсы.
Метод Dispose вызывается по окончании работы с классом SmtpClient.Метод Dispose оставляет объект SmtpClient в непригодном для работы состоянии.После вызова метода Dispose необходимо удалить все ссылки на SmtpClient, чтобы сборщик мусора мог восстановить память, занимаемую объектом SmtpClient.

Примеры
В следующем примере кода показывается асинхронная отправка сообщения электронной почты.

using System;
using System.Net;
using System.Net.Mail;
using System.Net.Mime;
using System.Threading;
using System.ComponentModel;
namespace Examples.SmptExamples.Async
{
    public class SimpleAsynchronousExample
    {
        static bool mailSent = false;
        private static void SendCompletedCallback(object sender, AsyncCompletedEventArgs e)
        {
            // Get the unique identifier for this asynchronous operation.
             String token = (string) e.UserState;

            if (e.Cancelled)
            {
                 Console.WriteLine("[{0}] Send canceled.", token);
            }
            if (e.Error != null)
            {
                 Console.WriteLine("[{0}] {1}", token, e.Error.ToString());
            } else
            {
                Console.WriteLine("Message sent.");
            }
            mailSent = true;
        }
        public static void Main(string[] args)
        {
            // Command line argument must the the SMTP host.
            SmtpClient client = new SmtpClient(args[0]);
            // Specify the e-mail sender.
            // Create a mailing address that includes a UTF8 character
            // in the display name.
            MailAddress from = new MailAddress("jane@contoso.com", 
               "Jane " + (char)0xD8+ " Clayton", 
            System.Text.Encoding.UTF8);
            // Set destinations for the e-mail message.
            MailAddress to = new MailAddress("ben@contoso.com");
            // Specify the message content.
            MailMessage message = new MailMessage(from, to);
            message.Body = "This is a test e-mail message sent by an application. ";
            // Include some non-ASCII characters in body and subject.
            string someArrows = new string(new char[] {'\u2190', '\u2191', '\u2192', '\u2193'});
            message.Body += Environment.NewLine + someArrows;
            message.BodyEncoding =  System.Text.Encoding.UTF8;
            message.Subject = "test message 1" + someArrows;
            message.SubjectEncoding = System.Text.Encoding.UTF8;
            // Set the method that is called back when the send operation ends.
            client.SendCompleted += new 
            SendCompletedEventHandler(SendCompletedCallback);
            // The userState can be any object that allows your callback 
            // method to identify this send operation.
            // For this example, the userToken is a string constant.
            string userState = "test message1";
            client.SendAsync(message, userState);
            Console.WriteLine("Sending message... press c to cancel mail. Press any other key to exit.");
            string answer = Console.ReadLine();
            // If the user canceled the send, and mail hasn't been sent yet,
            // then cancel the pending operation.
            if (answer.StartsWith("c") && mailSent == false)
            {
                client.SendAsyncCancel();
            }
            // Clean up.
            message.Dispose();
            Console.WriteLine("Goodbye.");
        }
    }
}