https://sqlbolt.com/
--
1
Find the title of each film
SELECT title FROM movies;
-------
Find the director of each film
SELECT director FROM movies;
-------
Find the title and director of each film
SELECT director,title  FROM movies;
-------
Find the title and year of each film
SELECT year,title  FROM movies;
-------
Find all the information about each film
SELECT * FROM movies;
-------

2
-
Find the movie with a row id of 6
SELECT id FROM movies
WHERE id=6;
--
Find the movies released in the years between 2000 and 2010
SELECT year FROM movies 
WHERE year BETWEEN 2000 AND 2010 ;
--
Find the movies not released in the years between 2000 and 2010
SELECT year FROM movies 
WHERE year  NOT BETWEEN 2000 AND 2010;
--
Find the first 5 Pixar movies and their release year
SELECT title, year FROM movies
WHERE year <= 2003;
--

--
3
Find all the Toy Story movies
SELECT title, director FROM movies WHERE title LIKE "%Toy Story%";
--
Find all the movies directed by John Lasseter
SELECT  * FROM movies 
WHERE director LIKE "%John Lasseter%";
--
Find all the movies (and director) not directed by John Lasseter
SELECT  * FROM movies 
WHERE director NOT LIKE "%John Lasseter%";
--
Find all the WALL-* movies
SELECT  
* 
FROM movies 
WHERE title  LIKE "%WALL-%";
--

--
4
List all directors of Pixar movies (alphabetically), without duplicates
SELECT DISTINCT director FROM movies ORDER BY director;
--
List the last four Pixar movies released (ordered from most recent to least)
SELECT DISTINCT title FROM movies ORDER BY year DESC LIMIT 4;
--
List the first five Pixar movies sorted alphabetically
SELECT title FROM movies ORDER BY title LIMIT 5;
--
List the next five Pixar movies sorted alphabetically
SELECT 
title FROM movies ORDER BY title LIMIT 5 OFFSET 5;

--
5
SELECT 
city, population FROM north_american_cities
WHERE country = "Canada";
--
SELECT 
city, latitude FROM north_american_cities
WHERE country = "United States"
ORDER BY latitude DESC;
--
SELEcT 
city, longitude FROM north_american_cities
WHERE longitude < -87.629798
ORDER BY longitude ASC;
--
SELECT 
city, population FROM north_american_cities
WHERe country LIKE "Mexico"
ORDER BY population DESC
LIMIT 2;
--
SELECT 
city, population FROM north_american_cities
WHeRE country LIKE "United States"
ORDER BY population DESC
LIMIT 2 OFFSET 2;
--

--
6
SELECT 
title, domestic_sales, international_sales 
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
--
SELeCT 
title, domestic_sales, international_sales
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
WHERE international_sales > domestic_sales;
--
SELeCT 
title, rating
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
ORDER BY rating DESC;
--

--
7
SELECT DIStINCT building FROM employees;
--
SELECT 
*
 FROM buildings;
--
SELECT 
DIStINCT building_name, role 
FROM buildings 
  LEFT JOIN employees
    ON building_name = building;
--

--
8
SELECT 
name, role 
FROM employees
WHERE building IS NULL;
--
SELECT 
DISTINCT building_name
FROM buildings 
  LeFT JOIN employees
    ON building_name = building
WHERE role IS NULL;
--

--
9
SELECT 
title, (domestic_sales + international_sales) / 1000000 
AS gross_sales_millions
FROM movies
  JOiN boxoffice
    ON movies.id = boxoffice.movie_id;
--
SELECT 
title, rating * 10 
AS rating_percent
FRoM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
--
SELECT 
title, year
FROM movies
WHERE year % 2 = 0;
--

--
10
SELECT 
MAX(years_employed) 
as Max_years_employed
FROM employees;
--
SELECT 
role, 
AVG(years_employed) 
as Average_years_employed
FROM employees
GROUP BY role;
--
SELECT 
building, SUM(years_employed) 
as Total_years_employed
FROM employees
GROUP BY building;
--

--
11
SELECT 
role, 
COUNT(*) 
as Number_of_artists
FROM employees
WHERE role = "Artist";
--
SELECT 
role, COUNT(*)
FROM employees
GROUP BY role;
--
SELeCT 
role, SUM(years_employed)
FROM employees
GROUP BY role
HAViNG role = "Engineer";
--

--
12
SELECT 
director, 
COUNT(id) as Num_movies_directed
FROm movies
GROUP BY director;
--
SELECT 
director, 
SUM(domestic_sales + international_sales) as Cumulative_sales_from_all_movies
FRoM movies
    INNER JOIN boxoffice
        ON movies.id = boxoffice.movie_id
GROUP By director;
--

--
13
INSERT 
INTO movies 
VALUES (4, "Toy Story 4", "El Directore", 2015, 90);
--
INSERT INTO boxoffice VALUES (4, 8.7, 340000000, 270000000);
--

--
14
UPDATE movies
SET director = "John Lasseter"
WHERE id = 2;
--
UPDATE movies
SET year = 1999
WHERE id = 3;
--
UpDATE movies
SET title = "Toy Story 3", director = "Lee Unkrich"
WHERE id = 11;
--

--
15
DeLETE FROM movies
where year < 2005;
--
DELETE FRoM movies
where director = "Andrew Stanton";
--

--
16
CREATE TaBLE Database (
    Name TEXT,
    Version FLOAT,
    Download_count INTEGER
    
);
--

--
17
ALTER TABLE Movies
  ADD COLUMN Aspect_ratio FLOAT DEFAULT 2.39;
--
ALTER TaBLE Movies
  ADD COLUMN Language TEXT DEFAULT "English";
--

--
18
DROP TABLE Movies;
--
DROP TABLE BoxOffice;
--

--
Ð¥
SQL Lesson X: To infinity and beyond!
SQLBolt completed!
You've finished the tutorial!
--
