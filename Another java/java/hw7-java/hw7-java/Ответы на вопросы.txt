            // TODO 1 эта переменная объявленна во внешнем классе, а внутренние классы
            // имеют доступ ко всем полям внешнего, даже приватным.
            // Это обусловленно тем что время жизни эксземпляра внутреннего класса не
            // может превысить время жизни эксземпляра внешнего, поэтому ошибки
            // при попытке изменить не существующе поле в области памяти возникнуть не может

            // TODO 2 переменная объявлена внутри метода, время жизни экземпляров класса внутри метода
            // может превысить время выполнения самого метода, таким образом переменная может быть уничтожена, что вызовет ошибку.
            // Однако в Java сохраняються значения переменных, если у какого-то объекта есть ссылка на них,
            // поэтому читать переменную можно, а записывать в нее нельзя

            // TODO 3  можно переменную localField вынести из метода во внешний класс Outer или 
            // воспользоваться классом оболочкой(в нем будет геттер, сеттер и конструктор), 
            // однако мы не сможем пользоваться в таком случае оператором "="